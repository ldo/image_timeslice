#!/usr/bin/python3
#+
# Take slices through a sequence of animation frames, and concatenate them
# into a new image. Invoke this script as follows:
#
#     image_timeslice «input-framename-fmt» «output-filename»
#
# where «input-framename-fmt» is a string containing a “%d” format
# descriptor for finding the successive input frame PNG filenames, and
# «output-filename» is the name of the output PNG file to create. It
# will have one column of pixels for each input frame, taken from the
# centre columns of the frames.
#
# For example, suppose you have a directory “frames” containing image
# files “frames/0001.png”, “frames/0002.png” etc. Then the following
# command
#
#    image_timeslice frames/%04d.png timeslice.png
#
# would generate a timesliced image into “timeslice.png”.
#-

import sys
import os
import time
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Matrix, \
    Rect, \
    Vector

slice_thickness = 1
across = True
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["across", "down", "thickness="]
  )
for keyword, value in opts :
    if keyword == "--across" :
        across = True
    elif keyword == "--down" :
        across = False
    elif keyword == "--thickness" :
        slice_thickness = int(value)
        assert slice_thickness > 0
    #end if
#end for
if len(args) != 2 :
    raise getopt.GetoptError \
      (
        "need exactly 2 args: the input filename format and the output filename"
      )
#end if
input_fmt, output_filename = args
update_interval = 1

frameindex = 0
frames = []
frame_size = None
sys.stderr.write("Collecting frames\n")
sys.stderr.flush()
start_time = time.time()
last_update = time.time()
while True :
    frameindex += 1
    framename = input_fmt % frameindex
    if not os.path.isfile(framename) :
        break
    frame = qah.ImageSurface.create_from_png(framename)
    this_frame_size = (frame.width, frame.height)[across]
    if frame_size != None and this_frame_size != frame_size :
        raise ValueError \
          (
                "inconsistent frame %s for frame %d: %d vs %d"
            %
                (("width", "height")[across], frameindex, frame_size, this_frame_size)
          )
    #end if
    frame_size = this_frame_size
    frames.append(frame)
    now = time.time()
    if now - last_update >= update_interval :
        sys.stderr.write(" frame : %d\r" % frameindex)
        sys.stderr.flush()
        last_update = now
    #end if
#end while
sys.stderr.write("\n")
if len(frames) == 0 :
    raise ValueError("no input frames found")
#end if
pix = qah.ImageSurface.create \
  (
    format = frames[0].format,
    dimensions =
        (
            lambda : Vector(frame_size, len(frames) * slice_thickness),
            lambda : Vector(len(frames) * slice_thickness, frame_size),
        )[across]()
  )
ctx = \
    (qah.Context.create(pix)
        .set_operator(CAIRO.OPERATOR_SOURCE)
        .set_antialias(CAIRO.ANTIALIAS_NONE)
    )
sys.stderr.write("Generating output\n")
sys.stderr.flush()
last_update = time.time()
for frameindex in range(len(frames)) :
    frame = frames[frameindex]
    ctx.source = \
        (qah.Pattern.create_for_surface(frame)
            .set_filter(CAIRO.FILTER_FAST)
            .set_matrix
              (
                Matrix.translate
                  (
                    (
                        lambda :
                            (
                                0,
                                (frame.width - slice_thickness + 1) // 2 - frameindex * slice_thickness
                            ),
                        lambda :
                            (
                                (frame.width - slice_thickness + 1) // 2 - frameindex * slice_thickness,
                                0
                            ),
                    )[across]()
                  )
              )
        )
    ctx.new_path()
    if across :
        ctx.rectangle(Rect(frameindex * slice_thickness, 0, slice_thickness, pix.height))
    else :
        ctx.rectangle(Rect(0, frameindex * slice_thickness, pix.width, slice_thickness))
    #end if
    ctx.fill()
    if now - last_update >= update_interval :
        sys.stderr.write(" frame : %d\r" % frameindex)
        sys.stderr.flush()
        last_update = now
    #end if
#end for
sys.stderr.write("\n")
pix.flush().write_to_png(output_filename)
finish_time = time.time()
sys.stderr.write("output created in %.2f seconds\n" % (finish_time - start_time))
